{"version":3,"sources":["atoms.tsx","components/DraggableCard.tsx","components/Board.tsx","App.tsx","index.tsx","theme.ts"],"names":["persistAtom","recoilPersist","toDoState","atom","key","default","Doing","Done","effects_UNSTABLE","Card","styled","div","props","isDragging","theme","cardColor","DragabbleCard","toDoId","toDoText","index","draggableId","magic","snapshot","ref","innerRef","dragHandleProps","draggableProps","React","memo","Wrapper","boardColor","Title","h2","Area","isDraggingOver","isDraggingFromThis","Form","form","Board","toDos","boardId","setToDos","useSetRecoilState","useForm","register","setValue","handleSubmit","onSubmit","toDo","newToDo","id","Date","now","text","allBoards","required","type","placeholder","droppableId","info","Boolean","draggingFromThisWith","droppableProps","map","Boards","App","useRecoilState","onDragEnd","destination","source","boardCopy","taskObj","splice","sourceBoard","destinationBoard","Object","keys","GlobalStyle","createGlobalStyle","bgColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fe28223.chunk.js","sourcesContent":["import { atom } from \"recoil\";\nimport { recoilPersist } from \"recoil-persist\";\n\nconst { persistAtom } = recoilPersist();\n\nexport interface ITodo {\n    id: number;\n    text: string;\n}\n\ninterface IToDoState {\n    [key: string]: ITodo[];\n}\n\nexport const toDoState = atom<IToDoState>({\n    key: \"toDo\",\n    default: {\n        \"To Do\": [],\n        Doing: [],\n        Done: [],\n    },\n    effects_UNSTABLE: [persistAtom],\n});","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\n\nconst Card = styled.div<{ isDragging: boolean }>`\n  border-radius: 5px;\n  margin-bottom: 5px;\n  padding: 10px;\n  background-color: ${(props) =>\n        props.isDragging ? \"#e4f2ff\" : props.theme.cardColor};\n  box-shadow: ${(props) =>\n        props.isDragging ? \"0px 2px 5px rgba(0, 0, 0, 0.05)\" : \"none\"};\n`;\n\ninterface IDragabbleCardProps {\n    toDoId: number;\n    toDoText: string;\n    index: number;\n}\n\nfunction DragabbleCard({ toDoId, toDoText, index }: IDragabbleCardProps) {\n    return (\n        <Draggable draggableId={toDoId + \"\"} index={index}>\n            {(magic, snapshot) => (\n                <Card\n                    isDragging={snapshot.isDragging}\n                    ref={magic.innerRef}\n                    {...magic.dragHandleProps}\n                    {...magic.draggableProps}\n                >\n                    {toDoText}\n                </Card>\n            )}\n        </Draggable>\n    );\n}\n\nexport default React.memo(DragabbleCard);","import { useForm } from \"react-hook-form\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport DragabbleCard from \"./DraggableCard\";\nimport { ITodo, toDoState } from \"../atoms\";\nimport { useSetRecoilState } from \"recoil\";\n\nconst Wrapper = styled.div`\n  width: 300px;\n  padding-top: 10px;\n  background-color: ${(props) => props.theme.boardColor};\n  border-radius: 5px;\n  min-height: 300px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst Title = styled.h2`\n  text-align: center;\n  font-weight: 600;\n  margin-bottom: 10px;\n  font-size: 18px;\n`;\n\ninterface IAreaProps {\n    isDraggingFromThis: boolean;\n    isDraggingOver: boolean;\n}\n\nconst Area = styled.div<IAreaProps>`\n  background-color: ${(props) =>\n        props.isDraggingOver\n            ? \"#dfe6e9\"\n            : props.isDraggingFromThis\n                ? \"#b2bec3\"\n                : \"transparent\"};\n  flex-grow: 1;\n  transition: background-color 0.3s ease-in-out;\n  padding: 20px;\n`;\n\nconst Form = styled.form`\n  width: 100%;\n  input {\n    width: 100%;\n  }\n`;\n\ninterface IBoardProps {\n    toDos: ITodo[];\n    boardId: string;\n}\n\ninterface IForm {\n    toDo: string;\n}\n\nfunction Board({ toDos, boardId }: IBoardProps) {\n    const setToDos = useSetRecoilState(toDoState);\n    const { register, setValue, handleSubmit } = useForm<IForm>();\n    const onValid = ({ toDo }: IForm) => {\n        const newToDo = {\n            id: Date.now(),\n            text: toDo,\n        };\n        setToDos((allBoards) => {\n            return {\n                ...allBoards,\n                [boardId]: [newToDo, ...allBoards[boardId]],\n            };\n        });\n        setValue(\"toDo\", \"\");\n    };\n    return (\n        <Wrapper>\n            <Title>{boardId}</Title>\n            <Form onSubmit={handleSubmit(onValid)}>\n                <input\n                    {...register(\"toDo\", { required: true })}\n                    type=\"text\"\n                    placeholder={`Add task on ${boardId}`}\n                />\n            </Form>\n            <Droppable droppableId={boardId}>\n                {(magic, info) => (\n                    <Area\n                        isDraggingOver={info.isDraggingOver}\n                        isDraggingFromThis={Boolean(info.draggingFromThisWith)}\n                        ref={magic.innerRef}\n                        {...magic.droppableProps}\n                    >\n                        {toDos.map((toDo, index) => (\n                            <DragabbleCard\n                                key={toDo.id}\n                                index={index}\n                                toDoId={toDo.id}\n                                toDoText={toDo.text}\n                            />\n                        ))}\n                        {magic.placeholder}\n                    </Area>\n                )}\n            </Droppable>\n        </Wrapper>\n    );\n}\nexport default Board;","import { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport { useRecoilState } from \"recoil\";\nimport styled from \"styled-components\";\nimport { toDoState } from \"./atoms\";\nimport Board from \"./components/Board\";\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100vw;\n  margin: 0 auto;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n\nconst Boards = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: flex-start;\n  width: 100%;\n  gap: 10px;\n`;\n\nfunction App() {\n  const [toDos, setToDos] = useRecoilState(toDoState);\n  const onDragEnd = (info: DropResult) => {\n    const { destination, draggableId, source } = info;\n    if (!destination) return;\n    if (destination?.droppableId === source.droppableId) {\n      // same board movement.\n      setToDos((allBoards) => {\n        const boardCopy = [...allBoards[source.droppableId]];\n        const taskObj = boardCopy[source.index];\n        boardCopy.splice(source.index, 1);\n        boardCopy.splice(destination?.index, 0, taskObj);\n        return {\n          ...allBoards,\n          [source.droppableId]: boardCopy,\n        };\n      });\n    }\n    if (destination.droppableId !== source.droppableId) {\n      // cross board movement\n      setToDos((allBoards) => {\n        const sourceBoard = [...allBoards[source.droppableId]];\n        const taskObj = sourceBoard[source.index];\n        const destinationBoard = [...allBoards[destination.droppableId]];\n        sourceBoard.splice(source.index, 1);\n        destinationBoard.splice(destination?.index, 0, taskObj);\n        return {\n          ...allBoards,\n          [source.droppableId]: sourceBoard,\n          [destination.droppableId]: destinationBoard,\n        };\n      });\n    }\n  };\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Wrapper>\n        <Boards>\n          {Object.keys(toDos).map((boardId) => (\n            <Board boardId={boardId} key={boardId} toDos={toDos[boardId]} />\n          ))}\n        </Boards>\n      </Wrapper>\n    </DragDropContext>\n  );\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nimport { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:black;\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n    bgColor: \"#3F8CF2\",\n    boardColor: \"#DADFE9\",\n    cardColor: \"white\",\n};"],"sourceRoot":""}